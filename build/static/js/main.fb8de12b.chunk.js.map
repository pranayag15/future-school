{"version":3,"sources":["history.js","api/RESTAPIClient.js","Components/basic.js","Components/experience.js","Components/response.js","Components/success.js","App.js","serviceWorker.js","index.js"],"names":["createBrowserHistory","submitBasicQuestionsResponse","_ref2","Object","asyncToGenerator","regenerator_default","a","mark","_callee","_ref","userId","firstName","lastName","email","phoneNumber","wrap","_context","prev","next","abrupt","Promise","resolve","reject","submissionStatus","savedResponse","stop","_x","apply","this","arguments","submitExperienceQuestionsResponse","_ref4","_callee2","_ref3","college","lastCompany","numYearsExperience","_context2","_x2","submitShortResponseQuestion","_ref6","_callee3","_ref5","response","_context3","_x3","BasicQuestions","data","_useState","useState","_useState2","slicedToArray","formValues","setFormValues","useEffect","console","log","then","res","history","push","react_default","createElement","Fragment","style","marginTop","className","width","class","paddingTop","esm","onSubmit","formState","formData","number","keys","length","Date","now","toString","substr","alert","handleSubmit","field","backgroundImage","type","ExperienceQuestions","props","ShortResponseQuestion","Success","onClick","App","react_router","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fb8de12b.chunk.js","sourcesContent":["import { createBrowserHistory } from 'history';\n\nexport default createBrowserHistory();","import Proptypes from 'prop-types'\nexport const submitBasicQuestionsResponse = async (\n    {userId,\n    firstName,\n    lastName,\n    email,\n    phoneNumber}\n  ) => {\n    return new Promise((resolve, reject) => {\n      resolve({\n        submissionStatus: \"success\",\n        savedResponse: {\n          userId,\n          firstName,\n          lastName,\n          email,\n          phoneNumber\n        }\n      });\n    });\n  };\n  \n  export const submitExperienceQuestionsResponse = async (\n    {userId,\n    college,\n    lastCompany,\n    numYearsExperience}\n  ) => {\n    return new Promise((resolve, reject) => {\n      resolve({\n        submissionStatus: \"success\",\n        savedResponse: {\n          userId,\n          college,\n          lastCompany,\n          numYearsExperience\n        }\n      });\n    });\n  };\n  \n  export const submitShortResponseQuestion = async (\n    {userId,\n    response}\n  ) => {\n    return new Promise((resolve, reject) => {\n      resolve({\n        submissionStatus: \"success\",\n        savedResponse: {\n          userId,\n          response\n        }\n      });\n    });\n  };\n  \n  // module.exports = {\n  //   submitBasicQuestionsResponse,\n  //   submitExperienceQuestionsResponse,\n  //   submitShortResponseQuestion\n  // };","import React, { useEffect, useState, useMemo } from 'react'\nimport { submitBasicQuestionsResponse } from '../api/RESTAPIClient'\nimport { Form, Text } from 'informed'\nimport history from '../history';\n\nfunction BasicQuestions(data) {\n  const [formValues, setFormValues] = useState()\n\n  const handleSubmit = (formData) => {\n    const { firstName, lastName, email, number } = formData\n    if (Object.keys(formData).length !== 0 && firstName && lastName && email && number) {\n      formData.userId = Date.now().toString().substr(10, 13) //for unique userId\n      console.log(formData)\n      setFormValues(formData)\n    } else {\n      console.log(\"no data\")\n      alert(\"Fill form completely\")\n    }\n  }\n\n  useEffect(() => {\n    if (formValues) {\n      console.log(formValues)\n      submitBasicQuestionsResponse(formValues).then(res => {\n        console.log(res)\n        history.push('/experience')\n      })\n    }\n  });\n\n  return (\n    <React.Fragment>\n      <div style={{ marginTop: \"10%\" }}>\n        <div className=\"ui centered card\" style={{ width: \"60vh\" }}>\n          <div class=\"content\">\n            <div className=\"header\" >\n              <center style={{ paddingTop: \"5%\" }}>\n                <h2>User Onboarding</h2>\n                <div className=\"meta\">\n                  <h4 style={{ marginTop: \"-2%\" }}>Part 1/3 - Basic Questions</h4>\n                </div>\n              </center>\n            </div>\n            <Form onSubmit={formState => handleSubmit(formState)}>\n              <div style={{ paddingTop: \"10%\" }}>\n                <form class=\"ui form\">\n                  <div class=\"equal width fields\">\n                    <div class=\"field\">\n                      <div class=\"meta\">\n                        <label class=\"meta\">First Name</label>\n                      </div>\n                      <Text field=\"firstName\" />\n                    </div>\n                    <div class=\"field\">\n                      <div class=\"meta\">\n                        <label>Last Name</label>\n                      </div>\n                      <Text field=\"lastName\" />\n                    </div>\n                  </div>\n                  <div class=\"field\">\n                    <div class=\"meta\">\n                      <label class=\"meta\">Email</label>\n                    </div>\n                    <Text field=\"email\" />\n                  </div>\n                  <div class=\"field\">\n                    <div class=\"meta\">\n                      <label class=\"meta\">Phone Number</label>\n                    </div>\n                    <Text field=\"number\" />\n                  </div>\n                  <div style={{ paddingTop: \"5%\" }}>\n                    <button style={{ backgroundImage: \"linear-gradient(to right, cornflowerblue , #53bffe)\" }} type=\"submit\" class=\"ui fluid blue button\">Submit</button>\n                  </div>\n                </form>\n              </div>\n            </Form>\n          </div>\n        </div>\n      </div>\n    </React.Fragment>\n  )\n}\n\nexport default BasicQuestions","import React, { useEffect, useState, useMemo } from 'react'\nimport { submitExperienceQuestionsResponse } from '../api/RESTAPIClient'\nimport { Form, Text } from 'informed'\nimport history from '../history';\n\nfunction ExperienceQuestions(props) {\n  const [formValues, setFormValues] = useState()\n\n  const handleSubmit = (formData) => {\n    const { college, lastCompany, numYearsExperience } = formData\n    if (Object.keys(formData).length !== 0 && college && lastCompany && numYearsExperience) {\n      formData.userId = Date.now().toString().substr(10, 13) //for unique userId\n      setFormValues(formData)\n    } else {\n      console.log(\"no data\")\n      alert(\"Fill form completely\")\n    }\n  }\n\n  useEffect(() => {\n    if (formValues) {\n      console.log(formValues)\n      submitExperienceQuestionsResponse(formValues).then(res => {\n        console.log(res)\n        history.push('/response')\n      })\n    }\n  });\n\n  return (\n    <React.Fragment>\n      <div style={{ marginTop: \"10%\" }}>\n        <div className=\"ui centered card\" style={{ width: \"60vh\" }}>\n          <div class=\"content\">\n            <div className=\"header\" >\n              <center style={{ paddingTop: \"5%\" }}>\n                <h2>User Onboarding</h2>\n                <div className=\"meta\">\n                  <h4 style={{ marginTop: \"-2%\" }}>Part 2/3 - Experience Questions</h4>\n                </div>\n              </center>\n            </div>\n            <Form onSubmit={formState => handleSubmit(formState)}>\n              <div style={{ paddingTop: \"10%\" }}>\n                <form class=\"ui form\">\n                  <div class=\"field\">\n                    <div class=\"meta\">\n                      <label>Which college did you go to?</label>\n                    </div>\n                    <Text field=\"college\" />\n                  </div>\n                  <div class=\"field\">\n                    <div class=\"meta\">\n                      <label>What was the last company you worked at?</label>\n                    </div>\n                    <Text field=\"lastCompany\" />\n                  </div>\n                  <div class=\"field\">\n                    <div class=\"meta\">\n                      <label>How many years of experience do you have?</label>\n                    </div>\n                    <Text field=\"numYearsExperience\" />\n                  </div>\n                  <div style={{ paddingTop: \"5%\" }}>\n                    <button style={{ backgroundImage: \"linear-gradient(to right, cornflowerblue , #53bffe)\" }} type=\"submit\" class=\"ui fluid blue button\">Submit</button>\n                  </div>\n                </form>\n              </div>\n            </Form>\n          </div>\n        </div>\n      </div>\n    </React.Fragment>\n  )\n}\n\nexport default ExperienceQuestions","import React, { useEffect, useState, useMemo } from 'react'\nimport { submitShortResponseQuestion } from '../api/RESTAPIClient'\nimport { Form, TextArea } from 'informed'\nimport history from '../history';\n\nfunction ShortResponseQuestion(props) {\n  const [formValues, setFormValues] = useState()\n\n  const handleSubmit = (formData) => {\n    const { response } = formData\n    if (Object.keys(formData).length !== 0 && response) {\n      formData.userId = Date.now().toString().substr(10, 13) //for unique userId\n      setFormValues(formData)\n    } else {\n      console.log(\"no data\")\n      alert(\"Fill form completely\")\n    }\n  }\n\n  useEffect(() => {\n    if (formValues) {\n      console.log(formValues)\n      submitShortResponseQuestion(formValues).then(res => {\n        console.log(res)\n        history.push('/success')\n      })\n    }\n  });\n\n  return (\n    <React.Fragment>\n      <div style={{ marginTop: \"10%\" }}>\n        <div className=\"ui centered card\" style={{ width: \"60vh\" }}>\n          <div class=\"content\">\n            <div className=\"header\" >\n              <center style={{ paddingTop: \"5%\" }}>\n                <h2>User Onboarding</h2>\n                <div className=\"meta\">\n                  <h4 style={{ marginTop: \"-2%\" }}>Part 3/3 - Short Response Question</h4>\n                </div>\n              </center>\n            </div>\n            <Form onSubmit={formState => handleSubmit(formState)}>\n              <div style={{ paddingTop: \"10%\" }}>\n                <form class=\"ui form\">\n                  <div class=\"field\">\n                    <div class=\"meta\">\n                      <label>Why are you interested in software engineering?</label>\n                    </div>\n                    <TextArea field=\"response\" />\n                  </div>\n                  <div style={{ paddingTop: \"5%\" }}>\n                    <button \n                      style={{ backgroundImage: \"linear-gradient(to right, cornflowerblue , #53bffe)\" }}\n                      type=\"submit\" \n                      class=\"ui fluid blue button\"\n                    >\n                      Submit\n                    </button>\n                  </div>\n                </form>\n              </div>\n            </Form>\n          </div>\n        </div>\n      </div>\n    </React.Fragment>\n  )\n}\n\nexport default ShortResponseQuestion","import React from 'react'\nimport history from '../history';\n\nfunction Success (data){\n    const handleClick = ()=>{\n        history.push('/')\n    }\nreturn(\n    <div>\n        <div className=\"container\">\n            <center style={{ paddingTop: \"5%\" }}>\n                <h2>Thanx for filling form!</h2>\n                <button style={{ backgroundImage: \"linear-gradient(to right, cornflowerblue , #53bffe)\" }} onClick={handleClick} className=\"ui blue button\">Home</button>\n            </center>\n        </div>\n    </div>\n)\n}\n\n\nexport default Success","import React from 'react';\nimport {Router, Route} from 'react-router-dom'\nimport history from './history';\nimport BasicQuestions from './Components/basic'\nimport ExperienceQuestions from './Components/experience'\nimport ShortResponseQuestion from './Components/response'\nimport Success from './Components/success'\n\nfunction App() {\n  return (\n    <Router history={history}>\n        <React.Fragment>\n          <Route exact path=\"/\" component={BasicQuestions} ></Route>\n          <Route exact path=\"/experience\" component={ExperienceQuestions} ></Route>\n          <Route exact path=\"/response\" component={ShortResponseQuestion} ></Route>\n          <Route exact path=\"/success\" component={Success} ></Route>\n        </React.Fragment>\n      </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}